<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- HandlerMapping 등록 -->
	<!-- SimpleUrlHandlerMapping객체는 setter 인젝션을 통해 Properties 타입의 컬렉션를 객체를 의존성 
		주입하고 있다 -->
	<!-- HandlerMapping 등록 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"> 
		<property name="mappings"> <props> <prop key="/login.do">login</prop> <prop 
		key="/getBoardList.do">getBoardList</prop> <prop key="/getBoard.do">getBoard</prop> 
		<prop key="/insertBoard.do">insertBoard</prop> <prop key="/updateBoard.do">updateBoard</prop> 
		<prop key="/deleteBoard.do">deleteBoard</prop> <prop key="/logout.do">logout</prop> 
		</props> </property> </bean> -->

	<!-- Controller 등록 -->
	<!-- <bean id="login" class="com.springbook.view.user.LoginController"></bean> 
		<bean id="getBoardList" class="com.springbook.view.board.GetBoardListController"></bean> 
		<bean id="getBoard" class="com.springbook.view.board.GetBoardController"></bean> 
		<bean id="insertBoard" class="com.springbook.view.board.InsertBoardController"></bean> 
		<bean id="updateBoard" class="com.springbook.view.board.UpdateBoardController"></bean> 
		<bean id="deleteBoard" class="com.springbook.view.board.DeleteBoardController"></bean> 
		<bean id="logout" class="com.springbook.view.user.LogoutController"></bean> -->

	<!--ViewResolver는 여러가지 있지만 JSP를 view로 사용하는 경우에는 InternalResourceViewResolver 
		사용 -->
	<!-- ViewResolver 등록 (/WEB-INF/board/이 경로에있는걸 인식하기 위한 코드) -->
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/board/"></property> <property name="suffix" 
		value=".jsp"></property> </bean> -->

	<!-- 어노테이션 Scans the classpath for annotated components that will be auto-registered 
		as Spring beans. By default, the Spring-provided @Component, @Repository, 
		@Service, @Controller, @RestController, @ControllerAdvice, and @Configuration 
		stereotypes will be detected, 클래스를 스캔한다 -->

	<!-- 파일 업로드 설정 id는 multipartResolver로 반드시, 용량 지정하지 않으면 무제한으로 안됨 -->
	<!-- MultipartFile 객체는 클라이언트가 업로드한 파일에 대한 모든 정보가 저장됨, 따라서 이 MultipartFile 
		객체만 있으면 원하는 위치에 해당파일을 업로드 할 수 있다 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000" />
	</bean>

	<!-- 예외 처리 설정 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArithmeticException">
					common/arithmeticError.jsp
				</prop>
				<prop key="java.lang.NullPointerException">
					common/nullPointerError.jsp
				</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="common/error.jsp" />
	</bean>

	<!-- 다국어 설정 -->
	<!-- MessageSource 등록 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.messageSource</value>
			</list>
		</property>
	</bean>

	<!-- LocaleResolver 등록 -->
	<!-- 스프링에서는 다양한 LocaleResolver를 지원하지만 세션으로 부터 Locale 정보를 추출하고 유지하는 SessionLocaleResolver를 
		가장 많이 사용 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	</bean>

	<!-- LocaleChangeInterceptor 등록 -->
	<!-- 특정 언어로 화면을 보다가 해당 화면의 언어를 변경하고자 할 때  LocaleChangeInterceptor 사용
		HandlerInterceptor를 구현한 클래스로서 스프링 설정 파일에 인터셉터로 등록해야 함
	-->
	<mvc:interceptors>
		<bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" /><!-- 클라이언트로 부터 "lang"이라는 파라미터로 특정 Locale이 전송되며 해당 Locale로 변경 -->
		</bean>
	</mvc:interceptors>

	<!-- 스프링에서는 @ControllerAdvice 와 @ExceptionHandler 어노테이션을 이요하여 컨트롤의 메소드 수행 
		중 발생하는 예외를 일관적으로 처리할 수 있다 그걸 위한 설정 -->
	<mvc:annotation-driven></mvc:annotation-driven><!-- HttpMessageConverter(html이 아닌 Json이나 xml로 변환) 를 구현하는 거 처리-->

	<context:component-scan
		base-package="com.springbook.view"></context:component-scan>

</beans>
